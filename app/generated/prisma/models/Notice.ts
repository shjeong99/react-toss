/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Notice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model Notice
 *
 */
export type NoticeModel = runtime.Types.Result.DefaultSelection<Prisma.$NoticePayload>;

export type AggregateNotice = {
  _count: NoticeCountAggregateOutputType | null;
  _avg: NoticeAvgAggregateOutputType | null;
  _sum: NoticeSumAggregateOutputType | null;
  _min: NoticeMinAggregateOutputType | null;
  _max: NoticeMaxAggregateOutputType | null;
};

export type NoticeAvgAggregateOutputType = {
  id: number | null;
};

export type NoticeSumAggregateOutputType = {
  id: number | null;
};

export type NoticeMinAggregateOutputType = {
  id: number | null;
  title: string | null;
  content: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type NoticeMaxAggregateOutputType = {
  id: number | null;
  title: string | null;
  content: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type NoticeCountAggregateOutputType = {
  id: number;
  title: number;
  content: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type NoticeAvgAggregateInputType = {
  id?: true;
};

export type NoticeSumAggregateInputType = {
  id?: true;
};

export type NoticeMinAggregateInputType = {
  id?: true;
  title?: true;
  content?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type NoticeMaxAggregateInputType = {
  id?: true;
  title?: true;
  content?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type NoticeCountAggregateInputType = {
  id?: true;
  title?: true;
  content?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type NoticeAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Notice to aggregate.
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notices to fetch.
   */
  orderBy?:
    | Prisma.NoticeOrderByWithRelationInput
    | Prisma.NoticeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NoticeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Notices
   **/
  _count?: true | NoticeCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: NoticeAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: NoticeSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NoticeMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NoticeMaxAggregateInputType;
};

export type GetNoticeAggregateType<T extends NoticeAggregateArgs> = {
  [P in keyof T & keyof AggregateNotice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotice[P]>
    : Prisma.GetScalarType<T[P], AggregateNotice[P]>;
};

export type NoticeGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NoticeWhereInput;
  orderBy?:
    | Prisma.NoticeOrderByWithAggregationInput
    | Prisma.NoticeOrderByWithAggregationInput[];
  by: Prisma.NoticeScalarFieldEnum[] | Prisma.NoticeScalarFieldEnum;
  having?: Prisma.NoticeScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: NoticeCountAggregateInputType | true;
  _avg?: NoticeAvgAggregateInputType;
  _sum?: NoticeSumAggregateInputType;
  _min?: NoticeMinAggregateInputType;
  _max?: NoticeMaxAggregateInputType;
};

export type NoticeGroupByOutputType = {
  id: number;
  title: string;
  content: string;
  createdAt: Date;
  updatedAt: Date;
  _count: NoticeCountAggregateOutputType | null;
  _avg: NoticeAvgAggregateOutputType | null;
  _sum: NoticeSumAggregateOutputType | null;
  _min: NoticeMinAggregateOutputType | null;
  _max: NoticeMaxAggregateOutputType | null;
};

type GetNoticeGroupByPayload<T extends NoticeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NoticeGroupByOutputType, T['by']> & {
      [P in keyof T & keyof NoticeGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], NoticeGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], NoticeGroupByOutputType[P]>;
    }
  >
>;

export type NoticeWhereInput = {
  AND?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[];
  OR?: Prisma.NoticeWhereInput[];
  NOT?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[];
  id?: Prisma.IntFilter<'Notice'> | number;
  title?: Prisma.StringFilter<'Notice'> | string;
  content?: Prisma.StringFilter<'Notice'> | string;
  createdAt?: Prisma.DateTimeFilter<'Notice'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Notice'> | Date | string;
};

export type NoticeOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NoticeWhereUniqueInput = Prisma.AtLeast<
  {
    id?: number;
    AND?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[];
    OR?: Prisma.NoticeWhereInput[];
    NOT?: Prisma.NoticeWhereInput | Prisma.NoticeWhereInput[];
    title?: Prisma.StringFilter<'Notice'> | string;
    content?: Prisma.StringFilter<'Notice'> | string;
    createdAt?: Prisma.DateTimeFilter<'Notice'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Notice'> | Date | string;
  },
  'id'
>;

export type NoticeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.NoticeCountOrderByAggregateInput;
  _avg?: Prisma.NoticeAvgOrderByAggregateInput;
  _max?: Prisma.NoticeMaxOrderByAggregateInput;
  _min?: Prisma.NoticeMinOrderByAggregateInput;
  _sum?: Prisma.NoticeSumOrderByAggregateInput;
};

export type NoticeScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NoticeScalarWhereWithAggregatesInput
    | Prisma.NoticeScalarWhereWithAggregatesInput[];
  OR?: Prisma.NoticeScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.NoticeScalarWhereWithAggregatesInput
    | Prisma.NoticeScalarWhereWithAggregatesInput[];
  id?: Prisma.IntWithAggregatesFilter<'Notice'> | number;
  title?: Prisma.StringWithAggregatesFilter<'Notice'> | string;
  content?: Prisma.StringWithAggregatesFilter<'Notice'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Notice'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Notice'> | Date | string;
};

export type NoticeCreateInput = {
  title: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type NoticeUncheckedCreateInput = {
  id?: number;
  title: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type NoticeUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NoticeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NoticeCreateManyInput = {
  id?: number;
  title: string;
  content: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type NoticeUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NoticeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  content?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NoticeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NoticeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type NoticeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NoticeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  content?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NoticeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: string;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type IntFieldUpdateOperationsInput = {
  set?: number;
  increment?: number;
  decrement?: number;
  multiply?: number;
  divide?: number;
};

export type NoticeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    content?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['notice']
>;

export type NoticeSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    content?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['notice']
>;

export type NoticeSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    title?: boolean;
    content?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['notice']
>;

export type NoticeSelectScalar = {
  id?: boolean;
  title?: boolean;
  content?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type NoticeOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'title' | 'content' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['notice']
>;

export type $NoticePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Notice';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: number;
      title: string;
      content: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['notice']
  >;
  composites: {};
};

export type NoticeGetPayload<S extends boolean | null | undefined | NoticeDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$NoticePayload, S>;

export type NoticeCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<NoticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: NoticeCountAggregateInputType | true;
};

export interface NoticeDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Notice'];
    meta: { name: 'Notice' };
  };
  /**
   * Find zero or one Notice that matches the filter.
   * @param {NoticeFindUniqueArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NoticeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NoticeFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Notice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NoticeFindUniqueOrThrowArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NoticeFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, NoticeFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Notice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindFirstArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NoticeFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NoticeFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Notice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindFirstOrThrowArgs} args - Arguments to find a Notice
   * @example
   * // Get one Notice
   * const notice = await prisma.notice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NoticeFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, NoticeFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Notices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notices
   * const notices = await prisma.notice.findMany()
   *
   * // Get first 10 Notices
   * const notices = await prisma.notice.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const noticeWithIdOnly = await prisma.notice.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NoticeFindManyArgs>(
    args?: Prisma.SelectSubset<T, NoticeFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Notice.
   * @param {NoticeCreateArgs} args - Arguments to create a Notice.
   * @example
   * // Create one Notice
   * const Notice = await prisma.notice.create({
   *   data: {
   *     // ... data to create a Notice
   *   }
   * })
   *
   */
  create<T extends NoticeCreateArgs>(
    args: Prisma.SelectSubset<T, NoticeCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Notices.
   * @param {NoticeCreateManyArgs} args - Arguments to create many Notices.
   * @example
   * // Create many Notices
   * const notice = await prisma.notice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NoticeCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NoticeCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Notices and returns the data saved in the database.
   * @param {NoticeCreateManyAndReturnArgs} args - Arguments to create many Notices.
   * @example
   * // Create many Notices
   * const notice = await prisma.notice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Notices and only return the `id`
   * const noticeWithIdOnly = await prisma.notice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NoticeCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, NoticeCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Notice.
   * @param {NoticeDeleteArgs} args - Arguments to delete one Notice.
   * @example
   * // Delete one Notice
   * const Notice = await prisma.notice.delete({
   *   where: {
   *     // ... filter to delete one Notice
   *   }
   * })
   *
   */
  delete<T extends NoticeDeleteArgs>(
    args: Prisma.SelectSubset<T, NoticeDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Notice.
   * @param {NoticeUpdateArgs} args - Arguments to update one Notice.
   * @example
   * // Update one Notice
   * const notice = await prisma.notice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NoticeUpdateArgs>(
    args: Prisma.SelectSubset<T, NoticeUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Notices.
   * @param {NoticeDeleteManyArgs} args - Arguments to filter Notices to delete.
   * @example
   * // Delete a few Notices
   * const { count } = await prisma.notice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NoticeDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NoticeDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Notices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notices
   * const notice = await prisma.notice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NoticeUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NoticeUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Notices and returns the data updated in the database.
   * @param {NoticeUpdateManyAndReturnArgs} args - Arguments to update many Notices.
   * @example
   * // Update many Notices
   * const notice = await prisma.notice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Notices and only return the `id`
   * const noticeWithIdOnly = await prisma.notice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NoticeUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, NoticeUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Notice.
   * @param {NoticeUpsertArgs} args - Arguments to update or create a Notice.
   * @example
   * // Update or create a Notice
   * const notice = await prisma.notice.upsert({
   *   create: {
   *     // ... data to create a Notice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Notice we want to update
   *   }
   * })
   */
  upsert<T extends NoticeUpsertArgs>(
    args: Prisma.SelectSubset<T, NoticeUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__NoticeClient<
    runtime.Types.Result.GetResult<
      Prisma.$NoticePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Notices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeCountArgs} args - Arguments to filter Notices to count.
   * @example
   * // Count the number of Notices
   * const count = await prisma.notice.count({
   *   where: {
   *     // ... the filter for the Notices we want to count
   *   }
   * })
   **/
  count<T extends NoticeCountArgs>(
    args?: Prisma.Subset<T, NoticeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NoticeCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Notice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NoticeAggregateArgs>(
    args: Prisma.Subset<T, NoticeAggregateArgs>,
  ): Prisma.PrismaPromise<GetNoticeAggregateType<T>>;

  /**
   * Group by Notice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NoticeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NoticeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NoticeGroupByArgs['orderBy'] }
      : { orderBy?: NoticeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, NoticeGroupByArgs, OrderByArg> & InputErrors,
  ): {} extends InputErrors
    ? GetNoticeGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Notice model
   */
  readonly fields: NoticeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Notice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NoticeClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Notice model
 */
export interface NoticeFieldRefs {
  readonly id: Prisma.FieldRef<'Notice', 'Int'>;
  readonly title: Prisma.FieldRef<'Notice', 'String'>;
  readonly content: Prisma.FieldRef<'Notice', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Notice', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Notice', 'DateTime'>;
}

// Custom InputTypes
/**
 * Notice findUnique
 */
export type NoticeFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter, which Notice to fetch.
   */
  where: Prisma.NoticeWhereUniqueInput;
};

/**
 * Notice findUniqueOrThrow
 */
export type NoticeFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter, which Notice to fetch.
   */
  where: Prisma.NoticeWhereUniqueInput;
};

/**
 * Notice findFirst
 */
export type NoticeFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter, which Notice to fetch.
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notices to fetch.
   */
  orderBy?:
    | Prisma.NoticeOrderByWithRelationInput
    | Prisma.NoticeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notices.
   */
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[];
};

/**
 * Notice findFirstOrThrow
 */
export type NoticeFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter, which Notice to fetch.
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notices to fetch.
   */
  orderBy?:
    | Prisma.NoticeOrderByWithRelationInput
    | Prisma.NoticeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notices.
   */
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[];
};

/**
 * Notice findMany
 */
export type NoticeFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter, which Notices to fetch.
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notices to fetch.
   */
  orderBy?:
    | Prisma.NoticeOrderByWithRelationInput
    | Prisma.NoticeOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Notices.
   */
  cursor?: Prisma.NoticeWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notices.
   */
  skip?: number;
  distinct?: Prisma.NoticeScalarFieldEnum | Prisma.NoticeScalarFieldEnum[];
};

/**
 * Notice create
 */
export type NoticeCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * The data needed to create a Notice.
   */
  data: Prisma.XOR<Prisma.NoticeCreateInput, Prisma.NoticeUncheckedCreateInput>;
};

/**
 * Notice createMany
 */
export type NoticeCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Notices.
   */
  data: Prisma.NoticeCreateManyInput | Prisma.NoticeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Notice createManyAndReturn
 */
export type NoticeCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * The data used to create many Notices.
   */
  data: Prisma.NoticeCreateManyInput | Prisma.NoticeCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Notice update
 */
export type NoticeUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * The data needed to update a Notice.
   */
  data: Prisma.XOR<Prisma.NoticeUpdateInput, Prisma.NoticeUncheckedUpdateInput>;
  /**
   * Choose, which Notice to update.
   */
  where: Prisma.NoticeWhereUniqueInput;
};

/**
 * Notice updateMany
 */
export type NoticeUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Notices.
   */
  data: Prisma.XOR<
    Prisma.NoticeUpdateManyMutationInput,
    Prisma.NoticeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Notices to update
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * Limit how many Notices to update.
   */
  limit?: number;
};

/**
 * Notice updateManyAndReturn
 */
export type NoticeUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * The data used to update Notices.
   */
  data: Prisma.XOR<
    Prisma.NoticeUpdateManyMutationInput,
    Prisma.NoticeUncheckedUpdateManyInput
  >;
  /**
   * Filter which Notices to update
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * Limit how many Notices to update.
   */
  limit?: number;
};

/**
 * Notice upsert
 */
export type NoticeUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * The filter to search for the Notice to update in case it exists.
   */
  where: Prisma.NoticeWhereUniqueInput;
  /**
   * In case the Notice found by the `where` argument doesn't exist, create a new Notice with this data.
   */
  create: Prisma.XOR<Prisma.NoticeCreateInput, Prisma.NoticeUncheckedCreateInput>;
  /**
   * In case the Notice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NoticeUpdateInput, Prisma.NoticeUncheckedUpdateInput>;
};

/**
 * Notice delete
 */
export type NoticeDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
  /**
   * Filter which Notice to delete.
   */
  where: Prisma.NoticeWhereUniqueInput;
};

/**
 * Notice deleteMany
 */
export type NoticeDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Notices to delete
   */
  where?: Prisma.NoticeWhereInput;
  /**
   * Limit how many Notices to delete.
   */
  limit?: number;
};

/**
 * Notice without action
 */
export type NoticeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notice
   */
  select?: Prisma.NoticeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notice
   */
  omit?: Prisma.NoticeOmit<ExtArgs> | null;
};
